/*
 * This file is generated by jOOQ.
 */
package com.gemini.mis.entity.items.tables.daos;


import com.gemini.mis.entity.items.tables.Author;
import com.gemini.mis.entity.items.tables.records.AuthorRecord;

import java.time.LocalDate;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


import org.jooq.impl.DefaultConfiguration;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AuthorDao extends DAOImpl<AuthorRecord, com.gemini.mis.entity.items.tables.pojos.Author, Integer> {

    /**
     * Create a new AuthorDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, com.gemini.mis.entity.items.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorDao with an attached configuration
     */
    @Autowired
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, com.gemini.mis.entity.items.tables.pojos.Author.class, configuration);
    }

    @Override
    public Integer getId(com.gemini.mis.entity.items.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchById(Integer... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public com.gemini.mis.entity.items.tables.pojos.Author fetchOneById(Integer value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>FIRST_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FIRST_NAME IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchByFirstName(String... values) {
        return fetch(Author.AUTHOR.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>LAST_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LAST_NAME IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchByLastName(String... values) {
        return fetch(Author.AUTHOR.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>DATE_OF_BIRTH BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfDateOfBirth(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Author.AUTHOR.DATE_OF_BIRTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DATE_OF_BIRTH IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchByDateOfBirth(LocalDate... values) {
        return fetch(Author.AUTHOR.DATE_OF_BIRTH, values);
    }

    /**
     * Fetch records that have <code>YEAR_OF_BIRTH BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfYearOfBirth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Author.AUTHOR.YEAR_OF_BIRTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>YEAR_OF_BIRTH IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchByYearOfBirth(Integer... values) {
        return fetch(Author.AUTHOR.YEAR_OF_BIRTH, values);
    }

    /**
     * Fetch records that have <code>DISTINGUISHED BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchRangeOfDistinguished(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Author.AUTHOR.DISTINGUISHED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DISTINGUISHED IN (values)</code>
     */
    public List<com.gemini.mis.entity.items.tables.pojos.Author> fetchByDistinguished(Byte... values) {
        return fetch(Author.AUTHOR.DISTINGUISHED, values);
    }

    /**
     * Created custom fetchRecord Method
     */
    public com.gemini.mis.entity.items.tables.pojos.Author fetchRecord(Integer Id){
            return this.ctx().selectFrom(Author.AUTHOR).where(Author.AUTHOR.ID.eq(Id)).fetchOneInto(com.gemini.mis.entity.items.tables.pojos.Author.class);
            }

            /**
             * Created custom Insert records Method
             */
            public com.gemini.mis.entity.items.tables.pojos.Author insertRecord(com.gemini.mis.entity.items.tables.pojos.Author classObject) {
                AuthorRecord record=this.ctx().newRecord(Author.AUTHOR);
                record.setFirstName(classObject.getFirstName());
                record.setLastName(classObject.getLastName());
                record.setDateOfBirth(classObject.getDateOfBirth());
                record.setYearOfBirth(classObject.getYearOfBirth());
                record.setDistinguished(classObject.getDistinguished());
                record.store();
                com.gemini.mis.entity.items.tables.pojos.Author result=record.into(com.gemini.mis.entity.items.tables.pojos.Author.class);
                return result;
            }

            /**
             * Created custom Delete record Method
             */
            public int deleteRecord(Integer Id){
                int result=this.ctx().deleteFrom(Author.AUTHOR).where(Author.AUTHOR.ID.eq(Id)).execute();
                return result;
            }

            /**
             * Created custom Update record Method
             */
            public int updateRecord(com.gemini.mis.entity.items.tables.pojos.Author classObject){
                int result=this.ctx().update(Author.AUTHOR)
                .set(Author.AUTHOR.FIRST_NAME,classObject.getFirstName())
                .set(Author.AUTHOR.LAST_NAME,classObject.getLastName())
                .set(Author.AUTHOR.DATE_OF_BIRTH,classObject.getDateOfBirth())
                .set(Author.AUTHOR.YEAR_OF_BIRTH,classObject.getYearOfBirth())
                .set(Author.AUTHOR.DISTINGUISHED,classObject.getDistinguished())
                .where(Author.AUTHOR.ID.eq(classObject.getId())).execute();
                return result;
            }
        }
